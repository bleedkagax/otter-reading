generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  username         String            @unique
  name             String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  connections      Connection[]
  ieltsAttempts    IeltsAttempt[]
  ieltsReadingLogs IeltsReadingLog[]
  ieltsStudyPlans  IeltsStudyPlan[]
  ieltsUserStats   IeltsUserStats?
  notes            Note[]
  passkey          Passkey[]
  password         Password?
  sessions         Session[]
  image            UserImage?
  roles            Role[]            @relation("RoleToUser")
}

model Note {
  id        String      @id @default(cuid())
  title     String
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  ownerId   String
  owner     User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  images    NoteImage[]

  @@index([ownerId])
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id        String   @id @default(cuid())
  altText   String?
  objectKey String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  noteId    String
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@index([noteId])
}

model UserImage {
  id        String   @id @default(cuid())
  altText   String?
  objectKey String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Permission {
  id          String   @id @default(cuid())
  action      String
  entity      String
  access      String
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]   @relation("PermissionToRole")

  @@unique([action, entity, access])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String       @default("")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[] @relation("PermissionToRole")
  users       User[]       @relation("RoleToUser")
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  /// The type of verification, e.g. "email" or "phone"
  type      String
  /// The thing we're trying to verify, e.g. a user's email or phone number
  target    String
  /// The secret key used to generate the otp
  secret    String
  /// The algorithm used to generate the otp
  algorithm String
  /// The number of digits in the otp
  digits    Int
  /// The number of seconds the otp is valid for
  period    Int
  /// The valid characters for the otp
  charSet   String
  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String   @id @default(cuid())
  providerName String
  providerId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerName, providerId])
}

model Passkey {
  id             String   @id
  aaguid         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  publicKey      Bytes
  userId         String
  webauthnUserId String
  counter        BigInt
  deviceType     String
  backedUp       Boolean
  transports     String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model IeltsPassage {
  id          String            @id @default(cuid())
  title       String
  content     String
  difficulty  String
  topic       String
  wordCount   Int
  source      String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  attempts    IeltsAttempt[]
  questions   IeltsQuestion[]
  readingLogs IeltsReadingLog[]
}

model IeltsQuestion {
  id            String          @id @default(cuid())
  passageId     String
  type          String
  questionText  String
  options       String?
  correctAnswer String
  explanation   String
  points        Int             @default(1)
  orderIndex    Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  passage       IeltsPassage    @relation(fields: [passageId], references: [id], onDelete: Cascade)
  responses     IeltsResponse[]

  @@index([passageId])
  @@index([type])
}

model IeltsAttempt {
  id          String          @id @default(cuid())
  userId      String
  passageId   String
  isTest      Boolean         @default(false)
  startedAt   DateTime        @default(now())
  completedAt DateTime?
  totalScore  Float?
  maxScore    Int?
  timeSpent   Int?
  passage     IeltsPassage    @relation(fields: [passageId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses   IeltsResponse[]

  @@index([userId])
  @@index([passageId])
  @@index([userId, completedAt])
}

model IeltsResponse {
  id         String        @id @default(cuid())
  attemptId  String
  questionId String
  userAnswer String
  isCorrect  Boolean
  timeTaken  Int?
  createdAt  DateTime      @default(now())
  question   IeltsQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempt    IeltsAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)

  @@unique([attemptId, questionId])
  @@index([attemptId])
  @@index([questionId])
}

model IeltsUserVocabulary {
  id             String    @id @default(cuid())
  userId         String
  word           String
  translation    String?
  context        String?
  note           String?
  passageId      String?
  mastered       Boolean   @default(false)
  status         String    @default("active")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  lastReviewed   DateTime?
  nextReviewDate DateTime?
  reviewCount    Int       @default(0)

  @@unique([userId, word])
  @@index([userId])
  @@index([userId, word])
  @@index([userId, status])
  @@index([userId, nextReviewDate])
}

model IeltsReadingLog {
  id        String       @id @default(cuid())
  userId    String
  passageId String
  startedAt DateTime     @default(now())
  endedAt   DateTime?
  progress  Float?
  passage   IeltsPassage @relation(fields: [passageId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([passageId])
}

model IeltsStudyPlan {
  id          String           @id @default(cuid())
  userId      String
  targetScore Float
  weeklyGoal  Int
  startDate   DateTime
  targetDate  DateTime?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       IeltsStudyTask[]

  @@index([userId])
}

model IeltsStudyTask {
  id          String         @id @default(cuid())
  planId      String
  taskType    String
  description String
  status      String         @default("pending")
  dueDate     DateTime?
  completedAt DateTime?
  passageId   String?
  plan        IeltsStudyPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId])
  @@index([status])
}

model IeltsUserStats {
  id                String   @id @default(cuid())
  userId            String   @unique
  readingTimeTotal  Int      @default(0)
  passagesCompleted Int      @default(0)
  testsCompleted    Int      @default(0)
  avgAccuracy       Float?
  vocabLearned      Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
